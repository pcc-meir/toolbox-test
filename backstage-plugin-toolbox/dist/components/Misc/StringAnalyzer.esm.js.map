{"version":3,"file":"StringAnalyzer.esm.js","sources":["../../../src/components/Misc/StringAnalyzer.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { DefaultEditor } from '../DefaultEditor';\nimport { faker } from '@faker-js/faker';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport { useToolboxTranslation } from '../../hooks';\n\nconst ANALYZED_CHARS =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 :;,.!?*+^${}()|/\\\\';\nconst escapeRegex = (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\nexport const StringAnalyzer = () => {\n  const [input, setInput] = React.useState('');\n  const [characters, setCharacters] = React.useState(0);\n  const [lines, setLines] = React.useState(0);\n  const [words, setWords] = React.useState(0);\n  const [alphabets, setAlphabets] = React.useState<\n    { char: string; count: number }[]\n  >([]);\n  const { t } = useToolboxTranslation();\n\n  useEffect(() => {\n    setCharacters(input.length);\n    setLines(input ? input.split(/\\r\\n|\\r|\\n/g).length : 0);\n    setWords(input ? input.split(/\\s+/).length : 0);\n    const charCounts = [];\n    let totalCount = 0;\n    for (const char of ANALYZED_CHARS) {\n      const count = input.split(new RegExp(escapeRegex(char), 'gi')).length - 1;\n      totalCount += count;\n      charCounts.push({ char: char === ' ' ? 'Whitespace' : char, count });\n    }\n    charCounts.push({ char: 'Others', count: input.length - totalCount });\n    setAlphabets(charCounts);\n  }, [input]);\n\n  return (\n    <DefaultEditor\n      input={input}\n      setInput={setInput}\n      allowFileUpload\n      acceptFileTypes=\".json,.csv,.txt,.html,.xml,.yaml,.yml,.log,.md,.markdown,.js,.ts,.c,.cpp,.java,.py,.rb,.php,.sh,.bat\"\n      sample={faker.lorem.paragraphs(Math.random() * 10 + 1, '\\n')}\n      rightContent={\n        <>\n          <Grid container>\n            <Grid item xs={12}>\n              <Typography variant=\"h6\">\n                {t('tool.string-analyzer.overallStats')}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Characters\"\n                value={characters}\n                variant=\"standard\"\n              />\n            </Grid>\n            <Grid item>\n              <TextField label=\"Lines\" value={lines} variant=\"standard\" />\n            </Grid>\n            <Grid item>\n              <TextField label=\"Words\" value={words} variant=\"standard\" />\n            </Grid>\n          </Grid>\n          <Grid container style={{ marginTop: '1rem' }}>\n            <Grid item xs={12}>\n              <Typography variant=\"h6\">\n                {t('tool.string-analyzer.characterStats')}\n              </Typography>\n            </Grid>\n            {alphabets.map(({ char, count }) => (\n              <Grid item key={char}>\n                <TextField\n                  label={char}\n                  value={count}\n                  size=\"small\"\n                  variant=\"standard\"\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      }\n    />\n  );\n};\n\nexport default StringAnalyzer;\n"],"names":[],"mappings":"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"}