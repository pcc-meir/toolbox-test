{"version":3,"file":"UrlExploder.esm.js","sources":["../../../src/components/Misc/UrlExploder.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useStyles } from '../../utils/hooks';\nimport {\n  ClearValueButton,\n  CopyToClipboardButton,\n  PasteFromClipboardButton,\n  SampleButton,\n} from '../Buttons';\nimport { faker } from '@faker-js/faker';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport { useToolboxTranslation } from '../../hooks';\n\nconst UrlExploder = () => {\n  const [url, setUrl] = useState<null | URL>(null);\n  const [rawInput, setRawInput] = useState('');\n  const [protocol, setProtocol] = useState('');\n  const [host, setHost] = useState('');\n  const [path, setPath] = useState('');\n  const [port, setPort] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [hash, setHash] = useState('');\n  const [query, setQuery] = useState('');\n  const [origin, setOrigin] = useState('');\n  const { classes } = useStyles();\n  const { t } = useToolboxTranslation();\n\n  const onInput = (value: string) => {\n    setRawInput(value);\n    try {\n      const newUrl = new URL(value);\n      setUrl(newUrl);\n    } catch (e) {\n      // NOOP\n    }\n  };\n\n  useEffect(() => {\n    if (url) {\n      setProtocol(url.protocol);\n      setHost(url.hostname);\n      setPath(url.pathname);\n      setUsername(url.username);\n      setPort(url.port);\n      setPassword(url.password);\n      setHash(url.hash);\n      setOrigin(url.origin);\n      let q = '';\n      url.searchParams.forEach((value, key) => {\n        q += `${key}=${value}\\n`;\n      });\n      setQuery(q);\n    }\n  }, [url]);\n\n  useEffect(() => {\n    try {\n      const newUrl = new URL('http://localhost');\n      newUrl.host = host;\n      newUrl.protocol = protocol;\n      newUrl.pathname = path;\n      newUrl.username = username;\n      newUrl.port = port;\n      newUrl.password = password;\n      newUrl.hash = hash;\n      const params = new URLSearchParams();\n      query.split('\\n').forEach(q => {\n        const parts = q.split('=');\n        if (parts.length === 2) {\n          params.append(parts[0], parts[1]);\n        }\n      });\n      newUrl.search = params.toString();\n      setOrigin(newUrl.origin);\n      setRawInput(newUrl.toString());\n    } catch (e) {\n      // NOOP\n    }\n  }, [protocol, host, path, username, port, password, hash, query]);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <SampleButton setInput={onInput} sample={faker.internet.url()} />\n        <ClearValueButton setValue={onInput} />\n        <PasteFromClipboardButton\n          title={t('tool.url-exploder.pasteFromClipboard')}\n          setInput={onInput}\n        />\n        {rawInput && (\n          <CopyToClipboardButton\n            title={t('tool.url-exploder.copyToClipboard')}\n            output={rawInput}\n          />\n        )}\n        <TextField\n          label=\"URL\"\n          variant=\"outlined\"\n          className={classes.fullWidth}\n          value={rawInput}\n          onChange={e => onInput(e.target.value)}\n          style={{ marginTop: '10px', marginBottom: '10px' }}\n        />\n      </Grid>\n      <Grid item xs={6}>\n        <TextField\n          label={t('tool.url-exploder.protocolLabel')}\n          className={classes.fullWidth}\n          value={protocol}\n          style={{ marginBottom: '10px' }}\n          onChange={e => setProtocol(e.target.value)}\n        />\n        <TextField\n          label={t('tool.url-exploder.pathLabel')}\n          className={classes.fullWidth}\n          value={path}\n          style={{ marginBottom: '10px' }}\n          onChange={e => setPath(e.target.value)}\n        />\n        <TextField\n          label={t('tool.url-exploder.usernameLabel')}\n          className={classes.fullWidth}\n          value={username}\n          style={{ marginBottom: '10px' }}\n          onChange={e => setUsername(e.target.value)}\n        />\n        <TextField\n          label={t('tool.url-exploder.queryLabel')}\n          className={classes.fullWidth}\n          value={query}\n          multiline\n          minRows={10}\n          style={{ marginBottom: '10px' }}\n          onChange={e => setQuery(e.target.value)}\n          helperText={t('tool.url-exploder.queryHelperText')}\n        />\n      </Grid>\n\n      <Grid item xs={6}>\n        <TextField\n          label={t('tool.url-exploder.hostLabel')}\n          className={classes.fullWidth}\n          value={host}\n          style={{ marginBottom: '10px' }}\n          onChange={e => setHost(e.target.value)}\n        />\n        <TextField\n          label={t('tool.url-exploder.portLabel')}\n          className={classes.fullWidth}\n          type=\"number\"\n          value={port}\n          style={{ marginBottom: '10px' }}\n          onChange={e => setPort(e.target.value)}\n        />\n        <TextField\n          label={t('tool.url-exploder.passwordLabel')}\n          className={classes.fullWidth}\n          value={password}\n          style={{ marginBottom: '10px' }}\n          onChange={e => setPassword(e.target.value)}\n        />\n        <TextField\n          label={t('tool.url-exploder.hashLabel')}\n          className={classes.fullWidth}\n          value={hash}\n          style={{ marginBottom: '10px' }}\n          onChange={e => setHash(e.target.value)}\n        />\n        <TextField\n          label={t('tool.url-exploder.originLabel')}\n          className={classes.fullWidth}\n          value={origin}\n          InputProps={{\n            readOnly: true,\n          }}\n          style={{ marginBottom: '10px' }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default UrlExploder;\n"],"names":[],"mappings":"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"}