{"version":3,"file":"Hash.esm.js","sources":["../../../src/components/Generators/Hash.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { DefaultEditor } from '../DefaultEditor';\nimport { faker } from '@faker-js/faker';\nimport { sha1, sha256, sha384, sha512 } from 'crypto-hash';\nimport { Md5 } from 'ts-md5';\n// @ts-ignore\nimport md2 from 'js-md2';\n// @ts-ignore\nimport md4 from 'js-md4';\nimport { OutputField } from '../DefaultEditor/OutputField';\n\nexport const Hash = () => {\n  const [input, setInput] = React.useState('');\n  const [hash, setHash] = React.useState({\n    md2: '',\n    md4: '',\n    md5: '',\n    sha1: '',\n    sha256: '',\n    sha384: '',\n    sha512: '',\n  });\n  const sample = faker.lorem.paragraph();\n\n  useEffect(() => {\n    Promise.all([\n      md2(input),\n      md4(input),\n      Md5.hashStr(input),\n      sha1(input),\n      sha256(input),\n      sha384(input),\n      sha512(input),\n    ]).then(results => {\n      setHash({\n        md2: results[0],\n        md4: results[1],\n        md5: results[2],\n        sha1: results[3],\n        sha256: results[4],\n        sha384: results[5],\n        sha512: results[6],\n      });\n    });\n  }, [input]);\n\n  return (\n    <DefaultEditor\n      input={input}\n      setInput={setInput}\n      sample={sample}\n      allowFileUpload\n      rightContent={\n        <>\n          <OutputField label=\"MD2\" value={hash.md2} />\n          <OutputField label=\"MD4\" value={hash.md4} />\n          <OutputField label=\"MD5\" value={hash.md5} />\n          <OutputField label=\"SHA1\" value={hash.sha1} />\n          <OutputField label=\"SHA256\" value={hash.sha256} />\n          <OutputField label=\"SHA384\" value={hash.sha384} />\n          <OutputField label=\"SHA512\" value={hash.sha512} />\n        </>\n      }\n    />\n  );\n};\n\nexport default Hash;\n"],"names":[],"mappings":";;;;;;;;;AAWO,MAAM,OAAO,MAAM;AACxB,EAAA,MAAM,CAAC,KAAO,EAAA,QAAQ,CAAI,GAAA,KAAA,CAAM,SAAS,EAAE,CAAA,CAAA;AAC3C,EAAA,MAAM,CAAC,IAAA,EAAM,OAAO,CAAA,GAAI,MAAM,QAAS,CAAA;AAAA,IACrC,GAAK,EAAA,EAAA;AAAA,IACL,GAAK,EAAA,EAAA;AAAA,IACL,GAAK,EAAA,EAAA;AAAA,IACL,IAAM,EAAA,EAAA;AAAA,IACN,MAAQ,EAAA,EAAA;AAAA,IACR,MAAQ,EAAA,EAAA;AAAA,IACR,MAAQ,EAAA,EAAA;AAAA,GACT,CAAA,CAAA;AACD,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,KAAA,CAAM,SAAU,EAAA,CAAA;AAErC,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,OAAA,CAAQ,GAAI,CAAA;AAAA,MACV,IAAI,KAAK,CAAA;AAAA,MACT,IAAI,KAAK,CAAA;AAAA,MACT,GAAA,CAAI,QAAQ,KAAK,CAAA;AAAA,MACjB,KAAK,KAAK,CAAA;AAAA,MACV,OAAO,KAAK,CAAA;AAAA,MACZ,OAAO,KAAK,CAAA;AAAA,MACZ,OAAO,KAAK,CAAA;AAAA,KACb,CAAE,CAAA,IAAA,CAAK,CAAW,OAAA,KAAA;AACjB,MAAQ,OAAA,CAAA;AAAA,QACN,GAAA,EAAK,QAAQ,CAAC,CAAA;AAAA,QACd,GAAA,EAAK,QAAQ,CAAC,CAAA;AAAA,QACd,GAAA,EAAK,QAAQ,CAAC,CAAA;AAAA,QACd,IAAA,EAAM,QAAQ,CAAC,CAAA;AAAA,QACf,MAAA,EAAQ,QAAQ,CAAC,CAAA;AAAA,QACjB,MAAA,EAAQ,QAAQ,CAAC,CAAA;AAAA,QACjB,MAAA,EAAQ,QAAQ,CAAC,CAAA;AAAA,OAClB,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACH,EAAG,CAAC,KAAK,CAAC,CAAA,CAAA;AAEV,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,aAAA;AAAA,IAAA;AAAA,MACC,KAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,eAAe,EAAA,IAAA;AAAA,MACf,YAAA,kBAEI,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,WAAY,EAAA,EAAA,KAAA,EAAM,KAAM,EAAA,KAAA,EAAO,IAAK,CAAA,GAAA,EAAK,CAC1C,kBAAA,KAAA,CAAA,aAAA,CAAC,WAAY,EAAA,EAAA,KAAA,EAAM,OAAM,KAAO,EAAA,IAAA,CAAK,GAAK,EAAA,CAAA,kBACzC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,EAAY,KAAM,EAAA,KAAA,EAAM,KAAO,EAAA,IAAA,CAAK,GAAK,EAAA,CAAA,kBACzC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,EAAY,OAAM,MAAO,EAAA,KAAA,EAAO,IAAK,CAAA,IAAA,EAAM,CAC5C,kBAAA,KAAA,CAAA,aAAA,CAAC,WAAY,EAAA,EAAA,KAAA,EAAM,QAAS,EAAA,KAAA,EAAO,IAAK,CAAA,MAAA,EAAQ,CAChD,kBAAA,KAAA,CAAA,aAAA,CAAC,WAAY,EAAA,EAAA,KAAA,EAAM,QAAS,EAAA,KAAA,EAAO,IAAK,CAAA,MAAA,EAAQ,CAChD,kBAAA,KAAA,CAAA,aAAA,CAAC,WAAY,EAAA,EAAA,KAAA,EAAM,QAAS,EAAA,KAAA,EAAO,IAAK,CAAA,MAAA,EAAQ,CAClD,CAAA;AAAA,KAAA;AAAA,GAEJ,CAAA;AAEJ;;;;"}