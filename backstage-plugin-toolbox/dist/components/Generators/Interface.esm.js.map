{"version":3,"file":"Interface.esm.js","sources":["../../../src/components/Generators/Interface.tsx"],"sourcesContent":["import {\n  InputData,\n  jsonInputForTargetLanguage,\n  quicktype,\n} from 'quicktype-core';\n\nimport React, { useEffect } from 'react';\nimport { DefaultEditor } from '../DefaultEditor';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\n\nconst formatOptions = [\n  'TypeScript',\n  'Ruby',\n  'JavaScript',\n  'Flow',\n  'Rust',\n  'Kotlin',\n  'Dart',\n  'Python',\n  'C#',\n  'Go',\n  'C++',\n  'Java',\n  'Scala3',\n  'Swift',\n  'Objective-C',\n  'Elm',\n  'JSON Schema',\n  'Pike',\n  'JavaScript PropTypes',\n  'Haskell',\n  'PHP',\n  undefined,\n] as const;\ntype FormatOption = (typeof formatOptions)[number];\n\nexport const Interface = () => {\n  const [input, setInput] = React.useState('');\n  const [output, setOutput] = React.useState('');\n  const [format, setFormat] = React.useState<FormatOption>('TypeScript');\n\n  const typeSelect = (\n    <Select\n      label=\"format\"\n      value={format}\n      onChange={val => setFormat(val.target.value as FormatOption)}\n      variant=\"standard\"\n    >\n      {formatOptions.map(opt => (\n        <MenuItem value={opt}>{opt}</MenuItem>\n      ))}\n    </Select>\n  );\n\n  useEffect(() => {\n    quicktypeJSON(format, input)\n      .then(({ lines }) => {\n        setOutput(lines.join('\\n'));\n      })\n      .catch((error: any) => {\n        setOutput(error);\n      });\n  }, [input, format]);\n\n  return (\n    <DefaultEditor\n      input={input}\n      setInput={setInput}\n      additionalTools={[typeSelect]}\n      output={output}\n    />\n  );\n};\n\nexport default Interface;\n\nasync function quicktypeJSON(targetLanguage: FormatOption, jsonString: string) {\n  const jsonInput = jsonInputForTargetLanguage(targetLanguage!);\n\n  await jsonInput.addSource({\n    name: 'MyInterface',\n    samples: [jsonString],\n  });\n\n  const inputData = new InputData();\n  inputData.addInput(jsonInput);\n\n  return await quicktype({\n    inputData,\n    lang: targetLanguage,\n    rendererOptions: { 'just-types': 'true' },\n  });\n}\n"],"names":[],"mappings":";;;;;;AAWA,MAAM,aAAgB,GAAA;AAAA,EACpB,YAAA;AAAA,EACA,MAAA;AAAA,EACA,YAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,aAAA;AAAA,EACA,KAAA;AAAA,EACA,aAAA;AAAA,EACA,MAAA;AAAA,EACA,sBAAA;AAAA,EACA,SAAA;AAAA,EACA,KAAA;AAAA,EACA,KAAA,CAAA;AACF,CAAA,CAAA;AAGO,MAAM,YAAY,MAAM;AAC7B,EAAA,MAAM,CAAC,KAAO,EAAA,QAAQ,CAAI,GAAA,KAAA,CAAM,SAAS,EAAE,CAAA,CAAA;AAC3C,EAAA,MAAM,CAAC,MAAQ,EAAA,SAAS,CAAI,GAAA,KAAA,CAAM,SAAS,EAAE,CAAA,CAAA;AAC7C,EAAA,MAAM,CAAC,MAAQ,EAAA,SAAS,CAAI,GAAA,KAAA,CAAM,SAAuB,YAAY,CAAA,CAAA;AAErE,EAAA,MAAM,UACJ,mBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,MAAA;AAAA,IAAA;AAAA,MACC,KAAM,EAAA,QAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,MACP,QAAU,EAAA,CAAA,GAAA,KAAO,SAAU,CAAA,GAAA,CAAI,OAAO,KAAqB,CAAA;AAAA,MAC3D,OAAQ,EAAA,UAAA;AAAA,KAAA;AAAA,IAEP,aAAA,CAAc,IAAI,CACjB,GAAA,qBAAA,KAAA,CAAA,aAAA,CAAC,YAAS,KAAO,EAAA,GAAA,EAAA,EAAM,GAAI,CAC5B,CAAA;AAAA,GACH,CAAA;AAGF,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,aAAA,CAAc,QAAQ,KAAK,CAAA,CACxB,KAAK,CAAC,EAAE,OAAY,KAAA;AACnB,MAAU,SAAA,CAAA,KAAA,CAAM,IAAK,CAAA,IAAI,CAAC,CAAA,CAAA;AAAA,KAC3B,CAAA,CACA,KAAM,CAAA,CAAC,KAAe,KAAA;AACrB,MAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AAAA,KAChB,CAAA,CAAA;AAAA,GACF,EAAA,CAAC,KAAO,EAAA,MAAM,CAAC,CAAA,CAAA;AAElB,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,aAAA;AAAA,IAAA;AAAA,MACC,KAAA;AAAA,MACA,QAAA;AAAA,MACA,eAAA,EAAiB,CAAC,UAAU,CAAA;AAAA,MAC5B,MAAA;AAAA,KAAA;AAAA,GACF,CAAA;AAEJ,EAAA;AAIA,eAAe,aAAA,CAAc,gBAA8B,UAAoB,EAAA;AAC7E,EAAM,MAAA,SAAA,GAAY,2BAA2B,cAAe,CAAA,CAAA;AAE5D,EAAA,MAAM,UAAU,SAAU,CAAA;AAAA,IACxB,IAAM,EAAA,aAAA;AAAA,IACN,OAAA,EAAS,CAAC,UAAU,CAAA;AAAA,GACrB,CAAA,CAAA;AAED,EAAM,MAAA,SAAA,GAAY,IAAI,SAAU,EAAA,CAAA;AAChC,EAAA,SAAA,CAAU,SAAS,SAAS,CAAA,CAAA;AAE5B,EAAA,OAAO,MAAM,SAAU,CAAA;AAAA,IACrB,SAAA;AAAA,IACA,IAAM,EAAA,cAAA;AAAA,IACN,eAAA,EAAiB,EAAE,YAAA,EAAc,MAAO,EAAA;AAAA,GACzC,CAAA,CAAA;AACH;;;;"}