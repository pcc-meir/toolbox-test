{"version":3,"file":"StringUtilities.esm.js","sources":["../../../src/components/Converters/StringUtilities.tsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { DefaultEditor } from '../DefaultEditor';\nimport {\n  camelCase,\n  capitalize,\n  kebabCase,\n  lowerCase,\n  snakeCase,\n  upperCase,\n} from 'lodash';\nimport TextField from '@mui/material/TextField';\nimport CheckBox from '@mui/material/Checkbox';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Box from '@mui/material/Box';\nimport { useToolboxTranslation } from '../../hooks';\n\nexport const StringUtilities = () => {\n  const [input, setInput] = React.useState('');\n  const [output, setOutput] = React.useState('');\n  const [mode, setMode] = React.useState('Replace');\n  const [searchWord, setSearchWord] = React.useState('');\n  const [replaceWord, setReplaceWord] = React.useState('');\n  const [isUseRegexpEnabled, setIsUseRegexpEnabled] = React.useState(false);\n  const { t } = useToolboxTranslation();\n\n  const sample = [\n    'requestURLDecoder',\n    'HTTP_CLIENT_FACTORY',\n    'generic_activity',\n    'WeirdActivity',\n    'kebab-is-good',\n    'Normal text',\n  ].join('\\n');\n\n  const mapLinesAndJoin = (str: string, callback: (line: string) => string) => {\n    return str.split('\\n').map(callback).join('\\n');\n  };\n\n  const transformString = useCallback(\n    (\n      inputString: string,\n      transformMode: string,\n      search: string,\n      replace: string,\n      useRegexp: boolean,\n    ) => {\n      switch (transformMode) {\n        case 'Replace':\n          if (!useRegexp) {\n            return inputString.replaceAll(search, replace);\n          }\n          try {\n            return inputString.replace(new RegExp(search, 'g'), replace);\n          } catch (e) {\n            throw new Error(`Invalid RegExp: ${e.message}`);\n          }\n        case 'Camel':\n          return mapLinesAndJoin(inputString, camelCase);\n        case 'Snake':\n          return mapLinesAndJoin(inputString, snakeCase);\n        case 'Kebab':\n          return mapLinesAndJoin(inputString, kebabCase);\n        case 'Upper':\n          return mapLinesAndJoin(inputString, upperCase);\n        case 'Lower':\n          return mapLinesAndJoin(inputString, lowerCase);\n        case 'Capitalize':\n          return mapLinesAndJoin(inputString, capitalize);\n        default:\n          return inputString;\n      }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (mode !== 'Replace' && (searchWord !== '' || replaceWord !== '')) {\n      setSearchWord('');\n      setReplaceWord('');\n    }\n\n    try {\n      setOutput(\n        transformString(\n          input,\n          mode,\n          searchWord,\n          replaceWord,\n          isUseRegexpEnabled,\n        ),\n      );\n    } catch (e) {\n      setOutput(e.message);\n    }\n  }, [\n    input,\n    mode,\n    searchWord,\n    replaceWord,\n    isUseRegexpEnabled,\n    transformString,\n  ]);\n\n  const extraLeftContent =\n    mode === 'Replace' ? (\n      <Box\n        display=\"flex\"\n        style={{ alignItems: 'center', padding: '8px 0 0 8px' }}\n      >\n        <TextField\n          label={t('tool.string-utilities-convert.inputSearch')}\n          onChange={event => setSearchWord(event.target.value)}\n          variant=\"outlined\"\n        />\n        <Box style={{ paddingLeft: '16px' }}>\n          <FormControlLabel\n            control={\n              <CheckBox\n                checked={isUseRegexpEnabled}\n                onClick={() => setIsUseRegexpEnabled(!isUseRegexpEnabled)}\n              />\n            }\n            label=\"Regexp\"\n          />\n        </Box>\n        <TextField\n          label={t('tool.string-utilities-convert.inputReplace')}\n          onChange={event => setReplaceWord(event.target.value)}\n        />\n      </Box>\n    ) : undefined;\n\n  return (\n    <DefaultEditor\n      input={input}\n      mode={mode}\n      setInput={setInput}\n      setMode={setMode}\n      output={output}\n      modes={[\n        'Replace',\n        'Camel',\n        'Snake',\n        'Kebab',\n        'Upper',\n        'Lower',\n        'Capitalize',\n      ]}\n      sample={sample}\n      extraLeftContent={extraLeftContent}\n    />\n  );\n};\n\nexport default StringUtilities;\n"],"names":[],"mappings":"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"}