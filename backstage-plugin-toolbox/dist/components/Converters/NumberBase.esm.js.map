{"version":3,"file":"NumberBase.esm.js","sources":["../../../src/components/Converters/NumberBase.tsx"],"sourcesContent":["import React from 'react';\nimport { useStyles } from '../../utils/hooks';\nimport {\n  ClearValueButton,\n  CopyToClipboardButton,\n  PasteFromClipboardButton,\n} from '../Buttons';\nimport FormControl from '@mui/material/FormControl';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport { useToolboxTranslation } from '../../hooks';\n\nexport const NumberBase = () => {\n  const { classes } = useStyles();\n  const [state, setState] = React.useState({\n    binary: '',\n    octal: '',\n    decimal: '',\n    hex: '',\n  });\n  const { t } = useToolboxTranslation();\n\n  const handleChange = (name: string, value: string) => {\n    if (value.length === 0) {\n      setState({ binary: '', octal: '', decimal: '', hex: '' });\n      return;\n    }\n\n    let base;\n    switch (name) {\n      case 'binary':\n        base = parseInt(value, 2);\n        break;\n      case 'octal':\n        base = parseInt(value, 8);\n        break;\n      case 'decimal':\n        base = parseInt(value, 10);\n        break;\n      case 'hex':\n        base = parseInt(value, 16);\n        break;\n      default:\n        base = NaN;\n    }\n\n    if (isNaN(base)) {\n      return;\n    }\n\n    setState({\n      binary: base.toString(2),\n      octal: base.toString(8),\n      decimal: base.toString(10),\n      hex: base.toString(16),\n    });\n  };\n\n  return (\n    <>\n      <FormControl className={classes.fullWidth}>\n        <Typography variant=\"subtitle1\">\n          {t('tool.number-base-convert.base2')}\n          <PasteFromClipboardButton setInput={v => handleChange('binary', v)} />\n          <ClearValueButton setValue={() => handleChange('binary', '')} />\n          <CopyToClipboardButton output={state.binary} />\n        </Typography>\n        <TextField\n          className={classes.fullWidth}\n          id=\"binary\"\n          name=\"binary\"\n          value={state.binary}\n          onChange={e => handleChange('binary', e.target.value)}\n          variant=\"outlined\"\n        />\n        <Typography variant=\"subtitle1\">\n          {t('tool.number-base-convert.base8')}\n          <PasteFromClipboardButton setInput={v => handleChange('octal', v)} />\n          <ClearValueButton setValue={() => handleChange('octal', '')} />\n          <CopyToClipboardButton output={state.octal} />\n        </Typography>\n        <TextField\n          className={classes.fullWidth}\n          id=\"octal\"\n          name=\"octal\"\n          value={state.octal}\n          onChange={e => handleChange('octal', e.target.value)}\n          variant=\"outlined\"\n        />\n        <Typography variant=\"subtitle1\">\n          {t('tool.number-base-convert.base10')}\n          <PasteFromClipboardButton\n            setInput={v => handleChange('decimal', v)}\n          />\n          <ClearValueButton setValue={() => handleChange('decimal', '')} />\n          <CopyToClipboardButton output={state.decimal} />\n        </Typography>\n        <TextField\n          className={classes.fullWidth}\n          id=\"decimal\"\n          name=\"decimal\"\n          value={state.decimal}\n          onChange={e => handleChange('decimal', e.target.value)}\n          variant=\"outlined\"\n        />\n        <Typography variant=\"subtitle1\">\n          {t('tool.number-base-convert.base16')}\n          <PasteFromClipboardButton setInput={v => handleChange('hex', v)} />\n          <ClearValueButton setValue={() => handleChange('hex', '')} />\n          <CopyToClipboardButton output={state.hex} />\n        </Typography>\n        <TextField\n          className={classes.fullWidth}\n          id=\"hex\"\n          name=\"hex\"\n          value={state.hex}\n          onChange={e => handleChange('hex', e.target.value)}\n          variant=\"outlined\"\n        />\n      </FormControl>\n    </>\n  );\n};\n\nexport default NumberBase;\n"],"names":[],"mappings":"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"}