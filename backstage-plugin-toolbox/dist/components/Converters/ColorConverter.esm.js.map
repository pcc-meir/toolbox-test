{"version":3,"file":"ColorConverter.esm.js","sources":["../../../src/components/Converters/ColorConverter.tsx"],"sourcesContent":["import { useStyles } from '../../utils/hooks';\nimport React from 'react';\nimport * as colorConvert from 'color-convert';\nimport {\n  CMYK,\n  HEX,\n  HSL,\n  HSV,\n  KEYWORD,\n  LAB,\n  LCH,\n  RGB,\n} from 'color-convert/conversions';\nimport {\n  ClearValueButton,\n  CopyToClipboardButton,\n  PasteFromClipboardButton,\n  SampleButton,\n} from '../Buttons';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport { useToolboxTranslation } from '../../hooks';\n\nexport const ColorConverter = () => {\n  const { classes } = useStyles();\n  const [input, setInput] = React.useState('');\n  const [hex, setHex] = React.useState<HEX>('');\n  const [rgb, setRgb] = React.useState<RGB>([0, 0, 0]);\n  const [hsl, setHsl] = React.useState<HSL>([0, 0, 0]);\n  const [hsv, setHsv] = React.useState<HSV>([0, 0, 0]);\n  const [cmyk, setCmyk] = React.useState<CMYK>([0, 0, 0, 0]);\n  const [html, setHtml] = React.useState<KEYWORD | null>(null);\n  const [lab, setLab] = React.useState<LAB>([0, 0, 0]);\n  const [lch, setLch] = React.useState<LCH>([0, 0, 0]);\n  const sample = '#d50032';\n  const { t } = useToolboxTranslation();\n\n  enum ColorType {\n    Hex = 'HEX',\n    Rgb = 'RGB',\n    Hsl = 'HSL',\n    Hsv = 'HSV',\n    Cmyk = 'CMYK',\n    Html = 'HTML',\n    Lab = 'LAB',\n    Lch = 'LCH',\n  }\n\n  const getInputStr = () => input || '';\n\n  const getColorType = (color: string) => {\n    switch (true) {\n      case color.includes('#'):\n        return ColorType.Hex;\n      case color.includes('rgb'):\n        return ColorType.Rgb;\n      case color.includes('hsl'):\n        return ColorType.Hsl;\n      case color.includes('hsv'):\n        return ColorType.Hsv;\n      case color.includes('cmyk'):\n        return ColorType.Cmyk;\n      case colorConvert.keyword.rgb(color as KEYWORD)?.length === 3:\n        return ColorType.Html;\n      case color.includes('lab'):\n        return ColorType.Lab;\n      case color.includes('lch'):\n        return ColorType.Lch;\n      default:\n        return null;\n    }\n  };\n\n  const parseRgb = ([r, g, b]: RGB): string => `rgb(${r},${g},${b})`;\n\n  const parseHsl = ([h, s, l]: HSL): string => `hsl(${h},${s}%,${l}%)`;\n\n  const parseHsv = ([h, s, v]: HSV): string => `hsv(${h},${s}%,${v}%)`;\n\n  const parseCmyk = ([c, m, y, k]: CMYK): string =>\n    `cmyk(${c}%,${m}%,${y}%,${k}%)`;\n\n  const parseLab = ([l, a, b]: LAB): string => `lab(${l},${a},${b})`;\n  const parseLch = ([l, c, h]: LCH): string => `lch(${l},${c},${h})`;\n\n  const removeCharacters = (value: string, colorType: string) => {\n    return value\n      .replace(/\\s/g, '')\n      .replace(colorType, '')\n      .replace('(', '')\n      .replace(')', '');\n  };\n\n  const handleNoMatch = () => {\n    setHex('');\n    setRgb([0, 0, 0]);\n    setHsl([0, 0, 0]);\n    setHsv([0, 0, 0]);\n    setCmyk([0, 0, 0, 0]);\n    setHtml(null);\n    setLab([0, 0, 0]);\n    setLch([0, 0, 0]);\n  };\n\n  const handleHex = (value: string) => {\n    try {\n      setHex(value);\n      setRgb(colorConvert.hex.rgb(value));\n      setHsl(colorConvert.hex.hsl(value));\n      setHsv(colorConvert.hex.hsv(value));\n      setCmyk(colorConvert.hex.cmyk(value));\n      setHtml(colorConvert.hex.keyword(value));\n      setLab(colorConvert.hex.lab(value));\n      setLch(colorConvert.hex.lch(value));\n    } catch (error) {\n      handleNoMatch();\n    }\n  };\n\n  const handleRgb = (value: string) => {\n    const values: RGB = removeCharacters(value, 'rgb')\n      .split(',')\n      .map((val: string) => parseInt(val, 10)) as RGB;\n\n    try {\n      setHex(`#${colorConvert.rgb.hex(values)}`);\n      setRgb(values);\n      setHsl(colorConvert.rgb.hsl(values));\n      setHsv(colorConvert.rgb.hsv(values));\n      setCmyk(colorConvert.rgb.cmyk(values));\n      setHtml(colorConvert.rgb.keyword(values));\n      setLab(colorConvert.rgb.lab(values));\n      setLch(colorConvert.rgb.lch(values));\n    } catch (error) {\n      handleNoMatch();\n    }\n  };\n\n  const handleHsl = (value: string) => {\n    const values: HSL = removeCharacters(value, 'hsl')\n      .split(',')\n      .map((val: string) => parseInt(val, 10)) as HSL;\n    try {\n      setHex(`#${colorConvert.hsl.hex(values)}`);\n      setRgb(colorConvert.hsl.rgb(values));\n      setHsl(values);\n      setHsv(colorConvert.hsl.hsv(values));\n      setCmyk(colorConvert.hsl.cmyk(values));\n      setHtml(colorConvert.hsl.keyword(values));\n      setLab(colorConvert.hsl.lab(values));\n      setLch(colorConvert.hsl.lch(values));\n    } catch (error) {\n      handleNoMatch();\n    }\n  };\n\n  const handleHsv = (value: string) => {\n    const values: HSV = removeCharacters(value, 'hsv')\n      .split(',')\n      .map((val: string) => parseInt(val, 10)) as HSV;\n    try {\n      setHex(`#${colorConvert.hsv.hex(values)}`);\n      setRgb(colorConvert.hsv.rgb(values));\n      setHsl(colorConvert.hsv.hsl(values));\n      setHsv(values);\n      setCmyk(colorConvert.hsv.cmyk(values));\n      setHtml(colorConvert.hsv.keyword(values));\n      setLab(colorConvert.hsv.lab(values));\n      setLch(colorConvert.hsv.lch(values));\n    } catch (error) {\n      handleNoMatch();\n    }\n  };\n\n  const handleCmyk = (value: string) => {\n    const values: CMYK = removeCharacters(value, 'cmyk')\n      .split(',')\n      .map((val: string) => parseInt(val, 10)) as CMYK;\n\n    try {\n      setHex(`#${colorConvert.cmyk.hex(values)}`);\n      setRgb(colorConvert.cmyk.rgb(values));\n      setHsl(colorConvert.cmyk.hsl(values));\n      setHsv(colorConvert.cmyk.hsv(values));\n      setCmyk(values);\n      setHtml(colorConvert.cmyk.keyword(values));\n      setLab(colorConvert.cmyk.lab(values));\n      setLch(colorConvert.cmyk.lch(values));\n    } catch (error) {\n      handleNoMatch();\n    }\n  };\n\n  const handleLab = (value: string) => {\n    const values: LAB = removeCharacters(value, 'lab')\n      .split(',')\n      .map((val: string) => parseInt(val, 10)) as LAB;\n\n    try {\n      setHex(`#${colorConvert.lab.hex(values)}`);\n      setRgb(colorConvert.lab.rgb(values));\n      setHsl(colorConvert.lab.hsl(values));\n      setHsv(colorConvert.lab.hsv(values));\n      setLab(values);\n      setLch(colorConvert.lab.lch(values));\n      setHtml(colorConvert.lab.keyword(values));\n    } catch (error) {\n      handleNoMatch();\n    }\n  };\n\n  const handleLch = (value: string) => {\n    const values: LCH = removeCharacters(value, 'lch')\n      .split(',')\n      .map((val: string) => parseInt(val, 10)) as LCH;\n\n    try {\n      setHex(`#${colorConvert.lch.hex(values)}`);\n      setRgb(colorConvert.lch.rgb(values));\n      setHsl(colorConvert.lch.hsl(values));\n      setHsv(colorConvert.lch.hsv(values));\n      setLab(colorConvert.lch.lab(values));\n      setLch(values);\n      setHtml(colorConvert.lch.keyword(values));\n    } catch (error) {\n      handleNoMatch();\n    }\n  };\n\n  const handleHtml = (value: KEYWORD) => {\n    try {\n      setHex(`#${colorConvert.keyword.hex(value)}`);\n      setRgb(colorConvert.keyword.rgb(value));\n      setHsl(colorConvert.keyword.hsl(value));\n      setHsv(colorConvert.keyword.hsv(value));\n      setCmyk(colorConvert.keyword.cmyk(value));\n      setHtml(value);\n      setLab(colorConvert.keyword.lab(value));\n      setLch(colorConvert.keyword.lch(value));\n    } catch (error) {\n      handleNoMatch();\n    }\n  };\n\n  const handleChange = (value: any) => {\n    setInput(value);\n    const colorType = getColorType(value);\n\n    switch (colorType) {\n      case ColorType.Hex:\n        handleHex(value);\n        break;\n      case ColorType.Rgb:\n        handleRgb(value);\n        break;\n      case ColorType.Hsl:\n        handleHsl(value);\n        break;\n      case ColorType.Hsv:\n        handleHsv(value);\n        break;\n      case ColorType.Cmyk:\n        handleCmyk(value);\n        break;\n      case ColorType.Html:\n        handleHtml(value);\n        break;\n      case ColorType.Lab:\n        handleLab(value);\n        break;\n      case ColorType.Lch:\n        handleLch(value);\n        break;\n      default:\n        setHex('');\n        setRgb([0, 0, 0]);\n        setHsl([0, 0, 0]);\n        setHsv([0, 0, 0]);\n        setCmyk([0, 0, 0, 0]);\n        setHtml(null);\n        setLab([0, 0, 0]);\n        setLch([0, 0, 0]);\n        break;\n    }\n  };\n\n  const OutputField = (props: { label: string; value?: string | null }) => {\n    const { label, value } = props;\n    return (\n      <>\n        <TextField\n          label={label}\n          style={{ marginTop: '1rem' }}\n          className={classes.fullWidth}\n          disabled\n          value={value ?? ''}\n        />\n        <CopyToClipboardButton output={value ?? ''} />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <FormControl className={classes.fullWidth}>\n        <Grid container>\n          <Grid item xs={12} lg={6}>\n            <Typography variant=\"subtitle1\">\n              <PasteFromClipboardButton setInput={v => handleChange(v)} />\n              <ClearValueButton setValue={() => handleChange('')} />\n              {sample && (\n                <SampleButton setInput={handleChange} sample={sample} />\n              )}\n            </Typography>\n            <TextField\n              id=\"input\"\n              name=\"input\"\n              label={t('tool.color-convert.inputLabel')}\n              value={getInputStr()}\n              className={classes.fullWidth}\n              onChange={e => handleChange(e.target.value)}\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n        <Divider style={{ marginTop: '1rem', marginBottom: '1rem' }} />\n        <Grid container>\n          <Grid item lg={6} md={8} xs={12}>\n            <OutputField label=\"Hex\" value={hex} />\n            <OutputField label=\"RGB\" value={parseRgb(rgb)} />\n            <OutputField label=\"HSL\" value={parseHsl(hsl)} />\n            <OutputField label=\"HSV\" value={parseHsv(hsv)} />\n            <OutputField label=\"CMYK\" value={parseCmyk(cmyk)} />\n            <OutputField label=\"HTML\" value={html} />\n            <OutputField label=\"Lab\" value={parseLab(lab)} />\n            <OutputField label=\"lch\" value={parseLch(lch)} />\n          </Grid>\n          <Grid item lg={6} md={4} xs={12}>\n            <Box bgcolor={hex} style={{ height: '50vh' }} />\n          </Grid>\n        </Grid>\n      </FormControl>\n    </>\n  );\n};\n\nexport default ColorConverter;\n"],"names":["ColorType"],"mappings":"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"}